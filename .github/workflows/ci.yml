name: CI & CD Pipeline

###############################################################################
#  DISPARADORES
###############################################################################
on:
  push:
    branches:
      - dev               # rama de desarrollo
    tags:
      - '*'               # cualquier tag → producción

###############################################################################
#  VARIABLES (ENV) COMUNES
###############################################################################
env:
  VALIDATION_BRANCH: main
  PIPELINE_STATUS_FILE: logs/pipeline_status.log
  REGISTRY: ghcr.io            # Usa GHCR; cámbialo si prefieres Docker Hub
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_REPO:  ${{ github.event.repository.name }}

###############################################################################
#  1) VALIDATE
###############################################################################
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate tag ancestry (only if ref is tag)
        id: tagcheck
        shell: bash
        run: |
          echo "🔍 Validating tag ancestry..."
          # ¿Es un tag?
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Traemos branch de validación
            git fetch origin $VALIDATION_BRANCH:$VALIDATION_BRANCH
            if git branch --contains ${{ github.sha }} | grep -q "$VALIDATION_BRANCH"; then
              echo "✅ Tag válido: commit presente en $VALIDATION_BRANCH"
            else
              echo "❌ Tag inválido: commit NO presente en $VALIDATION_BRANCH"
              exit 1
            fi
          else
            echo "✅ No es tag. Se asume rama dev."
          fi

  ###############################################################################
  #  2) BUILD
  ###############################################################################
  build_and_push:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Determine tag & namespace
        id: meta
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "namespace=produccion" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            shortsha=$(echo "${{ github.sha }}" | cut -c1-8)
            echo "namespace=desarrollo"  >> $GITHUB_OUTPUT
            echo "image_tag=dev-${shortsha}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        run: |
          IMAGE_MAIN=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.image_tag }}
          IMAGE_LATEST=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_REPO }}:latest
          
          docker build --build-arg PROFILE=${{ steps.meta.outputs.namespace }} \
            -t "$IMAGE_MAIN" -t "$IMAGE_LATEST" .
          
          docker push "$IMAGE_MAIN"
          docker push "$IMAGE_LATEST"

  ###############################################################################
  #  4) NOTIFY  (siempre)
  ###############################################################################
  notify:
    runs-on: ubuntu-latest
    needs: [build, push_pull]
    if: always()
    env:
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
    steps:
      - name: Get logs
        uses: actions/download-artifact@v4
        with:
          name: pipeline-logs
          path: logs/

      - name: Send e-mail report (simple stdout demo)
        env:
          EMAIL_USER:     ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        shell: bash
        run: |
          echo ">> NOTIFY STAGE"
          echo "Repo:      ${{ github.repository }}"
          echo "Ref:       ${{ github.ref_name }}"
          echo "Commit:    ${{ github.sha }}"
          echo "========   Pipeline results   ========"
          cat logs/pipeline_status.log || echo "No status file"
          
          
          # Descomenta si realmente quieres mandar correo
          apk add --no-cache msmtp
          {
            echo "account default"
            echo "host smtp.gmail.com"
            echo "port 587"
            echo "auth on"
            echo "user $EMAIL_USER"
            echo "password $EMAIL_PASSWORD"
            echo "from $EMAIL_USER"
            echo "tls on"
            echo "tls_starttls on"
            echo "tls_trust_file /etc/ssl/certs/ca-certificates.crt"
          } > ~/.msmtprc
          chmod 600 ~/.msmtprc
          SUBJECT="🚀 Pipeline finalizado"
          BODY=$(cat logs/pipeline_status.log 2>/dev/null || echo "Sin log")
          echo -e "To: $EMAIL_USER\nSubject: $SUBJECT\n\n$BODY" | msmtp -t
